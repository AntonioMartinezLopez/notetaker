import { type NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import { Header } from "~/components/Header";
import { NoteCard } from "~/components/NoteCard";
import { NoteEditor } from "~/components/NoteEditor";
import { api, type RouterOutputs } from "~/utils/api";

const Home: NextPage = () => {

  const { data: sessionData, status } = useSession();


  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        {sessionData?.user && status == 'authenticated' &&
          <Content />
        }
      </main>
    </>
  );
};

export default Home;

type Topic = RouterOutputs["topic"]["getAll"][0];
import { AnimatePresence, motion } from "framer-motion";

const Content: React.FC = () => {

  // HOOKS
  const { data: sessionData, } = useSession();


  // STATES
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);


  // DATA FETCHING - TOPICS
  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined,
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(data[0] ? data[0] : selectedTopic);
      }
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics();
    }
  });


  // DATA FETCHING - NOTES
  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    { topicId: selectedTopic?.id ?? "" },
    {
      enabled: sessionData?.user !== undefined && selectedTopic != null,
    }
  );

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    }
  });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    }
  })

  const list = {
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.07,
        delayChildren: 0.1
      },
    },
    hidden: {
      opacity: 0,
      transition: {
        staggerChildren: 0.05,
        staggerDirection: -1
      },
    },
  }

  const item = {
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        y: { stiffness: 1000, velocity: -100 }
      }
    },
    hidden: {
      y: 50,
      opacity: 0,
      transition: {
        y: { stiffness: 1000 }
      }
    },
  }




  return (
    <div className="mx-5 mt-5 grid grid-cols-4 gap-2">
      <motion.div className="px-2" initial="hidden" animate={topics && topics?.length > 0 && "visible"} variants={list} >
        <motion.ul className="menu rounded-box w-56 bg-base-100 p-2">
          {topics?.map((topic: Topic) => (
            <motion.li key={topic.id} whileHover={{ scale: 1.1 }} variants={item}>
              <a
                href="#"
                onClick={(evt) => {
                  evt.preventDefault();
                  setSelectedTopic(topic);
                }}
              >
                {topic.title}
              </a>
            </motion.li>
          ))}
        </motion.ul>
        <div className="divider"></div>
        <input
          type="text"
          placeholder="New Topic"
          className="input-bordered input input-sm w-full"
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              createTopic.mutate({
                title: e.currentTarget.value,
              });
              e.currentTarget.value = "";
            }
          }}
        />
      </motion.div>
      <motion.div className="col-span-3">
        <motion.div initial="hidden" animate={"visible"} variants={item}>
          <AnimatePresence>
            {notes?.map((note) => (
              <motion.div key={`note-${note.id}`} className="mt-5" initial={{ x: 300, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }} exit={{ opacity: 0, x: 300 }} >
                <NoteCard
                  note={note}
                  onDelete={() => void deleteNote.mutate({ noteId: note.id })}
                />
              </motion.div>

            ))}
          </AnimatePresence>
        </motion.div>

        <NoteEditor
          onSave={({ title, content }) => {
            void createNote.mutate({
              title,
              content,
              topicId: selectedTopic?.id ?? "",
            });
          }}
        />
      </motion.div>
    </div>
  )
}

// const AuthShowcase: React.FC = () => {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined },
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// };
